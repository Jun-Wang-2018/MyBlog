<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Hexo Cool Staffs II]]></title>
    <url>%2FMyBlog%2Fen%2FHexo-Cool-Staffs-II%2F</url>
    <content type="text"><![CDATA[Other cool stuffs from Theme NexT Tag doc, Hexo Tag Plugins doc and GitHub Markdown doc. Gist {% gist gist_id [filename] %} {% gist b4eb2aaa59af3fbdf1ae1f7ab979b6ae modular_inverse %} Jsfiddle {% jsfiddle shorttag [tabs] [skin] [width] [height] %} {% jsfiddle Jun_Wang/0c5L37vq js,html,css,result dark %} Pullquote {% pullquote [class] %} content // class is right or left {% endpullquote %} Exp: {% pullquote right %} {% cq %} 王羲之《兰亭集序神龙本》（冯承素摹）{% endcq %} {% endpullquote %} 王羲之《兰亭集序神龙本》（冯承素摹） 永和九年，岁在癸丑，暮春之初，会于会稽山阴之兰亭，修禊事也。群贤毕至，少长咸集。此地有崇山峻岭，茂林修竹，又有清流激湍，映带左右，引以为流觞曲水，列坐其次。虽无丝竹管弦之盛，一觞一咏，亦足以畅叙幽情。 是日也，天朗气清，惠风和畅。仰观宇宙之大，俯察品类之盛，所以游目骋怀，足以极视听之娱，信可乐也。 夫人之相与，俯仰一世。或取诸怀抱，悟言一室之内；或因寄所托，放浪形骸之外。虽趣舍万殊，静躁不同，当其欣于所遇，暂得于己，怏然自足，不知老之将至；及其所之既倦，情随事迁，感慨系之矣。向之所欣，俯仰之间，已为陈迹，犹不能不以之兴怀，况修短随化，终期于尽！古人云：“死生亦大矣。”岂不痛哉！ 每览昔人兴感之由，若合一契，未尝不临文嗟悼，不能喻之于怀。固知一死生为虚诞，齐彭殇为妄作。后之视今，亦犹今之视昔，悲夫！故列叙时人，录其所述，虽世殊事异，所以兴怀，其致一也。后之览者，亦将有感于斯文。 Images {% img [class names] /path/to/image [width] [height] [title text [alt text]] %} {% img /images/lantingjixu.png 800 200 %} Postlink {% post_link filename [optional text] %} {% post_link hexo-adjustment 'the previous post' %} the previous post Iframe {% iframe url [width] [height] %} {% iframe https://jun-wang-2018.github.io/MyBlog/en/Hexo-Cool-Staffs-II/ 100% 50% %} Link {% link text url [external] [title] %} {% link "open a new window" https://hexo.io/docs/tag-plugins external "Hexo doc" %} open a new window YouTube and Viemo {% youtube video_id %} {% vimeo video_id [width] [height] %} Tabs {% tabs First unique name %} &lt;!-- tab --&gt; **This is Tab 1.** &lt;!-- endtab --&gt; &lt;!-- tab --&gt; **This is Tab 2.** &lt;!-- endtab --&gt; &lt;!-- tab --&gt; **This is Tab 3.** &lt;!-- endtab --&gt; {% endtabs %} First unique name 1First unique name 2First unique name 3This is Tab 1.This is Tab 2.This is Tab 3. Permalink for &gt; [Tab one](#tab-one). Permalink for &gt; [Tab one 1](#tab-one-1). Permalink for &gt; [Tab one 2](#tab-one-2). Permalink for &gt; [Tab one 3](#tab-one-3). Permalink for &gt; [Tab two](#tab-two). Permalink for &gt; [Tab two 1](#tab-two-1). Permalink for &gt; [Tab two 2](#tab-two-2). Permalink for &gt; [Tab two 3](#tab-two-3). {% tabs Tab one %} &lt;!-- tab --&gt; **This is Tab 1.** &lt;!-- endtab --&gt; &lt;!-- tab --&gt; **This is Tab 2.** &lt;!-- endtab --&gt; &lt;!-- tab --&gt; **This is Tab 3.** &lt;!-- endtab --&gt; {% endtabs %} {% tabs Tab two %} &lt;!-- tab --&gt; **This is Tab 1.** &lt;!-- endtab --&gt; &lt;!-- tab --&gt; **This is Tab 2.** &lt;!-- endtab --&gt; &lt;!-- tab --&gt; **This is Tab 3.** &lt;!-- endtab --&gt; {% endtabs %} Permalink for &gt; Tab one. Permalink for &gt; Tab one 1. Permalink for &gt; Tab one 2. Permalink for &gt; Tab one 3. Permalink for &gt; Tab two. Permalink for &gt; Tab two 1. Permalink for &gt; Tab two 2. Permalink for &gt; Tab two 3. Tab one 1Tab one 2Tab one 3This is Tab 1.This is Tab 2.This is Tab 3. Tab two 1Tab two 2Tab two 3This is Tab 1.This is Tab 2.This is Tab 3. Labels Lorem {% label @ipsum %} {% label primary@dolor sit %} amet, consectetur {% label success@adipiscing elit, %} sed {% label info@do eiusmod %} tempor incididunt ut labore et dolore magna aliqua. Ut enim *{% label warning @ad %}* minim veniam, quis **{% label danger@nostrud %}** exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate ~~{% label default @velit %}~~ &lt;mark&gt;esse&lt;/mark&gt; cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. Buttons &lt;p&gt;{% btn #, Text & Large Icon, home fa-fw fa-lg %} {% btn #, Text & Large Icon & Title, home fa-fw fa-lg, Title %}&lt;/p&gt; Text & Large Icon Text & Large Icon & Title &lt;div class=&quot;text-center&quot;&gt;&lt;div&gt;{% btn #,, header %}{% btn #,, edge %}{% btn #,, times %}{% btn #,, circle-o %}&lt;/div&gt; &lt;div&gt;{% btn #,, italic %}{% btn #,, scribd %}&lt;/div&gt; &lt;div&gt;{% btn #,, google %}{% btn #,, chrome %}{% btn #,, opera %}{% btn #,, diamond fa-rotate-270 %}&lt;/div&gt;&lt;/div&gt; &lt;div class=&quot;text-center&quot;&gt;{% btn https://github.com/theme-next/hexo-theme-next, NexT, github fa-fw fa-lg, NexT source code %}&lt;/div&gt; NexT Relative link to a post {% post_link hexo-adjustment 'Hexo Adjustment' %} Hexo Adjustment Task list - [x] @mentions, #refs, [links](), **formatting**, and &lt;del&gt;tags&lt;/del&gt; supported - [x] list syntax required (any unordered or ordered list supported) - [x] this is a complete item - [ ] this is an incomplete item @mentions, #refs, links, formatting, and tags supported list syntax required (any unordered or ordered list supported) this is a complete item this is an incomplete item Requirement:1$ npm install markdown-it-task-lists --saveThen, copy and paste the following snippet to _config.yml12345678910111213markdown_it_plus: highlight: true html: true xhtmlOut: true breaks: true langPrefix: linkify: true typographer: quotes: “”‘’ plugins: - plugin: name: markdown-it-task-lists enable: trueMore info: ref1, ref2 Other references: 1, 2, 3, 4, 5]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Cool</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo Cool Stuffs I]]></title>
    <url>%2FMyBlog%2Fen%2Fhexo-cool-staffs-I%2F</url>
    <content type="text"><![CDATA[Some cool stuffs from Theme NexT Tag doc, Hexo Tag Plugins doc and GitHub Markdown doc. Note {% note %} #### Header (without define class style) {% endnote %} Header(without define class style) {% note default %} #### Default Header Welcome to [Hexo!](https://hexo.io) {% endnote %} Default HeaderWelcome to Hexo! {% note primary %} #### Primary Header **Welcome** to [Hexo!](https://hexo.io) {% endnote %} Primary HeaderWelcome to Hexo! {% note info %} #### Info Header **Welcome** to [Hexo!](https://hexo.io) {% endnote %} Info HeaderWelcome to Hexo! {% note warning %} #### Warning Header **Welcome** to [Hexo!](https://hexo.io) {% endnote %} Warning HeaderWelcome to Hexo! {% note danger %} #### Danger Header **Welcome** to [Hexo!](https://hexo.io) {% endnote %} Danger HeaderWelcome to Hexo! {% note info no-icon %} #### No icon note Note **without** icon: `note info no-icon` {% code %} code block in note tag code block in note tag code block in note tag {% endcode %} {% endnote %} No icon noteNote without icon: note info no-icon123code block in note tagcode block in note tagcode block in note tag {% note success %} #### Codeblock in note {% code %} code block in note tag code block in note tag code block in note tag {% endcode %} {% endnote %} Codeblock in note123code block in note tagcode block in note tagcode block in note tag {% note default %} #### Lists in note * ul * ul * ul * ul * ul 1. ol 2. ol 1. ol 2. ol 3. ol {% endnote %} Lists in noteulululululololololol {% note default %} #### Table in Note | 1 | 2 | | - | - | | 3 | 4 | | 5 | 6 | | 7 | INFO [hexo-math] Using engine 'katex'| {% endnote %} Table in Note1234567INFO [hexo-math] Using engine ‘katex’ Quotes Blockquote {% blockquote [author[, source]] [link] [source_link_title] %} content {% endblockquote %} Examples: {% blockquote David Levithan, Wide Awake %} Do not just seek happiness for yourself. Seek happiness for all. Through kindness. Through mercy. {% endblockquote %} Do not just seek happiness for yourself. Seek happiness for all. Through kindness. Through mercy. David LevithanWide Awake {% blockquote @DevDocs https://twitter.com/devdocs/status/356095192085962752 %} NEW: DevDocs now comes with syntax highlighting. http://devdocs.io {% endblockquote %} NEW: DevDocs now comes with syntax highlighting. http://devdocs.io @DevDocstwitter.com/devdocs/status/356095192085962752 {% blockquote Seth Godin http://sethgodin.typepad.com/seths_blog/2009/07/welcome-to-island-marketing.html Welcome to Island Marketing %} Every interaction is both precious and an opportunity to delight. {% endblockquote %} Every interaction is both precious and an opportunity to delight. Seth GodinWelcome to Island Marketing Other quotes As Kanye West said: &gt; We're living the future so &gt; the present is our past. As Kanye West said: We’re living the future so the present is our past. I think you should use an `&lt;addr&gt;` element here instead. I think you should use an &lt;addr&gt; element here instead. {% centerquote %}Elegant in code, simple in core{% endcenterquote %} or {% cq %}Elegant in code, simple in core{% endcq %} Elegant in code, simple in core Code Block {% codeblock [title] [lang:language] [url] [link text] %} code snippet {% endcodeblock %} Example {% codeblock lang:objc %} [rectangle setX: 10 y: 10 width: 20 height: 20]; {% endcodeblock %} 1[rectangle setX: 10 y: 10 width: 20 height: 20]; {% codeblock _.compact http://underscorejs.org/#compact Underscore.js %} _.compact([0, 1, false, 2, '', 3]); => [1, 2, 3] {% endcodeblock %} _.compactUnderscore.js12_.compact([0, 1, false, 2, &apos;&apos;, 3]);=&gt; [1, 2, 3] {% codeblock snippet 1 lang:js %} var allp=$("div p"); allp.attr("class",function(i,n){ return Number(n)+1; }); {% endcodeblock %} {% codeblock snippet 2 lang:js %} allp.each(function(){ console.log(this); }); {% endcodeblock %} Two code block one after another Right: {% codeblock snippet 1 lang:js %} var allp=$("div p"); allp.attr("class",function(i,n){ return Number(n)+1; }); {% endcodeblock %} {% codeblock snippet 2 lang:js %} allp.each(function(){ console.log(this); }); {% endcodeblock %} snippet 11234var allp=$("div p");allp.attr("class",function(i,n)&#123; return Number(n)+1; &#125;); snippet 2123allp.each(function()&#123; console.log(this); &#125;); Wrong: ```js snippet 1var allp=$(“div p”);allp.attr(“class”,function(i,n){return Number(n)+1;});``````js snippet 2allp.each(function(){console.log(this);});``` snippet 112345678910var allp=$("div p");allp.attr("class",function(i,n)&#123; return Number(n)+1; &#125;);``` ```js snippet 2allp.each(function()&#123; console.log(this); &#125;); Backtick Code Block ``` [language] [title] [url] [link text] code snippet ``` ``` py Pythondef foo():if not bar:return True``` Python123def foo(): if not bar: return True]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Cool</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo Adjustment]]></title>
    <url>%2FMyBlog%2Fen%2Fhexo-adjustment%2F</url>
    <content type="text"><![CDATA[Some adjustment I’ve made. Migrate files from Jekyll Move all files in the Jekyll _posts folder to the source/_posts folder. Modify the new_post_name setting in _config.yml: 1new_post_name: :year-:month-:day-:title.md Image align center themes\next\source\css_schemes\Mist_posts-expanded.styl 1.post-body img &#123; margin: auto; &#125; More info: ref Two images side by side themes\next\source\css_common\components\tags\group-pictures.styl 123456.page-post-detail .post-body .group-picture-column &#123; // float: none; margin-top: 10px; // width: auto !important; img &#123; margin: 0 auto; &#125;&#125; In markdown post, 1234&#123;% gp 2-2 %&#125;&#123;% asset_img 27.png %&#125;&#123;% asset_img EC.gif %&#125;&#123;% endgp %&#125; More info: ref1, ref2 Disqus https://disqus.com/admin/ Settings --&gt; General --&gt; Shoretname --&gt; Your website shortname is xxxxx-xxxxxxxxxx themes/next/_config.yml 12345disqus: enable: true shortname: xxxxx-xxxxxxxxxx count: true lazyload: false Categories and Tags 1. Categories page 1$ hexo new page categories source/categories/index.md 123456---title: Categoriesdate: 2019-02-15 03:52:34type: &quot;categories&quot;comments: false--- 2. Tags page 1$ hexo new page tags source/tags/index.md 123456---title: Tagsdate: 2019-02-15 03:53:35type: &quot;tags&quot;comments: false--- More info: ref1ref2 3. Menu Settings themes/next/_config.yml 123456menu: home: / || home #about: /about/ || user archives: /archives/ || archive categories: /categories/ || th tags: /tags/ || tags 4. Font Matter Add categories and tags to each post. Such as 12345---title: &quot;ECDSA and Bitcoin I: Intuition About Elliptic Curve&quot;categories: [ECDSA and Bitcoin]tags: [Elliptic Curve, Math, Python Code]--- More info: hexo doc 5. Remove lines in logo themes/next/layout/_partials/header/brand.swig 1234567&lt;div class=&quot;custom-logo-site-title&quot;&gt; &lt;a href=&quot;&#123;&#123; config.root &#125;&#125;&quot; class=&quot;brand&quot; rel=&quot;start&quot;&gt; &lt;!-- &lt;span class=&quot;logo-line-before&quot;&gt;&lt;i&gt;&lt;/i&gt;&lt;/span&gt; --&gt; &lt;span class=&quot;site-title&quot;&gt;&#123;&#123; title &#125;&#125;&lt;/span&gt; &lt;!-- &lt;span class=&quot;logo-line-after&quot;&gt;&lt;i&gt;&lt;/i&gt;&lt;/span&gt; --&gt; &lt;/a&gt;&lt;/div&gt; 6. Generate and deploy 1$ hexo clean &amp;&amp; hexo deploy -g Don’t forget “-g”, we need to generate categories pages and tags pages before deployment. 7. Write a draft and publish Create a markdown file 1$ hexo new draft &quot;Draft 01&quot; Write something and check it on local server 1$ hexo server --draft --open Publish 1$ hexo publish Draft-01 More info: ref 8. hexo-browsersync Install 1$ npm install hexo-browsersync --save Once installed, you are no longer need to refresh your browser again. 😃 1$ hexo server --draft --open Make some changes in your markdown file and save. The browser is synchronized automaticlly. 🎉 More info: GitHub repo]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo and KaTeX]]></title>
    <url>%2FMyBlog%2Fen%2Fhexo-and-katex%2F</url>
    <content type="text"><![CDATA[Now we’ve build our Hexo site on GitHub and seen Hexo’s “Hello World” post, it’s time to embed KaTeX. 1. hexo-math Install 1$ npm install hexo-math --save If it doesn’t work on your Mac, try sudo. 1$ sudo npm install hexo-math --save Config In your Hexo root directory, find _config.yml, add this code at the end. Don’t change those indents. 123456789math: engine: katex katex: css: https://cdn.jsdelivr.net/npm/katex@0.10.0/dist/katex.min.css js: https://cdn.jsdelivr.net/npm/katex@0.10.0/dist/katex.min.js config: # KaTeX config throwOnError: false errorColor: &quot;#cc0000&quot; 2. hexo-theme-next “«NexT» is a high quality elegant Hexo theme. It is crafted from scratch, with love.” Let’s install it. Change dir to your local Hexo root directory, make sure you see subdirectories like node_modules, source, themes, etc. 123$ cd MyBlog$ ls_config.yml node_modules package.json public scaffolds source themes Clone the whole theme repository to your local Hexo root directory. 1$ git clone https://github.com/theme-next/hexo-theme-next themes/next 3. hexo-theme-next Math Equations Install hexo-renderer-markdown-it-plus You need to uninstall the original renderer hexo-renderer-marked first. 12npm un hexo-renderer-marked --savenpm i hexo-renderer-markdown-it-plus --save Config In your themes/next/_config.yml, below Third Party Services Settings, find the following parts and change some of them. 1234567891011121314151617181920# Math Equations Render Supportmath: enable: true per_page: false #engine: mathjax engine: katex ... ... katex: # Use 0.7.1 as default, jsdelivr as default CDN, works everywhere even in China cdn: //cdn.jsdelivr.net/npm/katex@0.10.0/dist/katex.min.css #cdn: //cdn.jsdelivr.net/npm/katex@0.7.1/dist/katex.min.css # CDNJS, provided by cloudflare, maybe the best CDN, but not works in China #cdn: //cdnjs.cloudflare.com/ajax/libs/KaTeX/0.7.1/katex.min.css copy_tex: # See: https://github.com/KaTeX/KaTeX/tree/master/contrib/copy-tex enable: true copy_tex_js: //cdn.jsdelivr.net/npm/katex@0/dist/contrib/copy-tex.min.js copy_tex_css: //cdn.jsdelivr.net/npm/katex@0/dist/contrib/copy-tex.min.css Make sure the KaTeX version you set in both _config.yml and themes/next/_config.yml are 0.10.0, the default version 0.7.1 doesn’t work. “copy_tex” is enabled and it will bring us a bonus(see the bottom of this page). 3. Usage Inline 1Aha! $E = mc^&#123;2&#125;$. Output: Aha! E=mc2E = mc^{2}E=mc2. Block 1234$$\left(\beta m c^2 + c \left(\sum_&#123;n=1&#125;^3\alpha_n p_n\right)\right) \psi(x,t)= i\hbar \frac&#123;\partial \psi(x,t)&#125;&#123;\partial t&#125;$$ Output: (βmc2+c(∑n=13αnpn))ψ(x,t)=iℏ∂ψ(x,t)∂t\left(\beta m c^2 + c \left(\sum_{n=1}^3\alpha_n p_n\right)\right) \psi(x,t) = i\hbar \frac{\partial \psi(x,t)}{\partial t} (βmc2+c(n=1∑3​αn​pn​))ψ(x,t)=iℏ∂t∂ψ(x,t)​ Bonus: Select this funcion and paste it in a text editor. What do you get? It’s a KaTeX format text! COOL! More info: KaTeX Supported Functions]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>KaTeX</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo Hello World]]></title>
    <url>%2FMyBlog%2Fen%2Fhexo-hello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is Hexo’s default post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or ask questions on GitHub. Quick Start Create a new post 1$ hexo new "My New Post" More info: Writing Run server 1$ hexo server More info: Server Generate static files 1$ hexo generate More info: Generating Deploy to remote sites 1$ hexo deploy More info: Deployment What else? 123456789101112131415161718192021222324252627$ hexo helpINFO [hexo-math] Using engine &apos;katex&apos; //This line will appear when KaTeX is embeded.Usage: hexo &lt;command&gt;Commands: clean Remove generated files and cache. config Get or set configurations. deploy Deploy your website. generate Generate static files. help Get help on a command. init Create a new Hexo folder. list List the information of the site migrate Migrate your site from other system to Hexo. new Create a new post. publish Moves a draft post from _drafts to _posts folder. render Render files with renderer plugins. server Start the server. version Display version information.Global Options: --config Specify config file instead of using _config.yml --cwd Specify the CWD --debug Display all verbose messages in the terminal --draft Display draft posts --safe Disable all plugins and scripts --silent Hide output on console]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hello World</tag>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo and GitHub]]></title>
    <url>%2FMyBlog%2Fen%2Fhexo-and-github%2F</url>
    <content type="text"><![CDATA[KaTeX is the fastest math typesetting library for the web. Hexo is a fast, simple &amp; powerful blog framework. KaTeX, Hexo and GitHub together is a good choice for those who want to build a Blog and write some equations on his/her posts. Before embed KaTeX, let’s build Hexo on GitHub. 1. Hexo Requirements Node.js Git More info: hexo doc Install Hexo In your terminal 1$ npm install hexo-cli -g If it doesn’t work on your Mac, try adding sudo at the beginning. Setup your blog 12$ hexo init MyBlog$ cd MyBlog A directory MyBlog is created and initialized. It’s the Hexo root directory where your hexo files are stored. Run local server 1$ hexo server The output is: 12INFO Start processingINFO Hexo is running at http://localhost:4000 . Press Ctrl+C to stop. Open http://localhost:4000 in your brower, you’ll see your initial site. More info: hexo.io, hexo-github 2. Deploy to GitHub 2.1 Create an empty repository If you don’t have a GitHub account, create one. If you have a GitHub account, click https://github.com/new and create a empty repository: Choose a name(say ‘MyBlog’), and click create repository, leave everything else alone. Click “Create repository”. Look at your browser, the url of your repository is 1https://github.com/YOUR-GITHUB-ACCOUNT/YOUR-REPOSITORY 2.2 Deploy your site Install hexo-deployer-git 1$ npm install hexo-deployer-git --save Once installed, find a file _config.yml in MyBlog, the Hexo root directory. Edit the following part: 12345678url: https://YOUR-GITHUB-ACCOUNT.github.io/YOUR-REPOSITORY/ # This is your site url.root: /YOUR-REPOSITORY/......deploy: type: git repo: https://github.com/YOUR-GITHUB-ACCOUNT/YOUR-REPOSITORY # This is your repository url. branch: master If you use text editor such as Atom or Sublime, don’t forgget to save your changes. If you do not have Atom or Sublime, you may use command 1$ vi _config.yml After edittig, press ‘Esc’ and input :wq to save the changes. Then 1$ hexo clean &amp;&amp; hexo deploy Sometimes you need to generate categories and tags files before deployment(See the bottom of this post): 1$ hexo clean &amp;&amp; hexo deploy -g Go back to your browser, refresh your GitHub repository page, find Settings button and click it. Scroll down to the tag “GitHub Pages”, now your “Source” is None. Click None button, select master branch and Save. After your site automatically refreshed. Go back to the tag “GitHub Pages”, you’ll see 1Your site is published at https://YOUR-GITHUB-ACCOUNT.github.io/YOUR-REPOSITORY/ Click the link and you will see a “404” error message. Don’t panic, refresh your brower several minutes later and you’ll see a “Hello World” post on your site. More info: hexo doc. 2.3 Create another repository for your Hexo develpment files There is a vital difference between Hexo and Jekyll. In Jekyll, develpment files and site files are pushed to the same repository on GitHub. In Hexo, if you want to keep track of your develpment, you need to create another repository on GitHub. Let’s create one and call it YOUR-DEV-REPOSITORY. The following operations are onhttps://github.com/YOUR-GITHUB-ACCOUNT/YOUR-DEV-REPOSITORY # Your dev repositorynothttps://github.com/YOUR-GITHUB-ACCOUNT/YOUR-REPOSITORY # Your site repositoryorhttps://YOUR-GITHUB-ACCOUNT.github.io/YOUR-REPOSITORY/ # Your site Another tip: Before you do anything BIG, backup your local Hexo root repository and save it somewhere else. Just in case. 2.4 Push develpment files to GitHub Go back to your terminal, change directory to your Hexo root directory(in my case it’s MyBlog). 123456$ git init$ git status$ git add .$ git commit -m &quot;first commit&quot;$ git remote add origin https://github.com/YOUR-GITHUB-ACCOUNT/YOUR-DEV-REPOSITORY.git$ git push origin master Refresh YOUR-DEV-REPOSITORY on GitHub, if there are folders like scaffolds, source, themes etc, your develpment are uploaded. There are two things need to mention. Alias for a link Line 5 means you give your link a alias “origin”. So if you want to push a branch to it, you don’t need to copy and paste this link like this: 1$ git push https://github.com/YOUR-GITHUB-ACCOUNT/YOUR-REPOSITORY.git master You may choose another alias if you want. For example: 12$ git remote add destination https://github.com/YOUR-GITHUB-ACCOUNT/YOUR-REPOSITORY.git$ git push destination master “origin” is just the default alias. Other usefull commands: 12$ git remote -v // List all aliases.$ git remote rm destination // Remove the alias named &quot;destination&quot;. master vs. gh-pages If you want to create a repository on branch “gh-pages” instead of “master”, add one line after git init and replace master with gh-pages, it looks like this: 1234567$ git init$ git checkout -b gh-pages$ git status$ git add .$ git commit -m &quot;first commit&quot;$ git remote add origin https://github.com/YOUR-GITHUB-ACCOUNT/YOUR-REPOSITORY.git$ git push origin gh-pages Both works fine. I prefer “master”, the default one. More info: branch, git doc One more thing If you are asked to create a submodule, do it. This means you will create new repository to backup your personalized theme. Three steps. Step 1, Fork the origial theme NexT. Go to hexo-theme-next and click “Fork”. Go back to your own GitHub directories, a new reopository “hexo-theme-next” is there. Step 2, Connect your local theme to GitHub In your local Hexo root directory, change to themes/next: 12345$ cd themes/next$ lsLICENSE.md bower.json gulpfile.coffee package.json testREADME.md crowdin.yml languages scripts_config.yml docs layout source Make sure your working directory is “next”. Then 12345$ git status$ git add .$ git commit -m &quot;update theme&quot;$ git remote add theme https://github.com/YOUR-GITHUB-ACCOUNT/hexo-theme-next$ git push theme master If you are asked to pull,1$ git pullIf you are asked to merge,12$ git merge&quot;please enter a commit message to explain why this merge is necessary, especially if it merges an updated upstream into a topic branch.&quot; press “i”input your merge messagepress “esc”write “:wq”then press enter Check your GitHub repository “hexo-theme-next” and see “Latest commit … seconds ago”. Step 3, connect your submodule to this directory. 1$ git submodule add https://github.com/YOUR-GITHUB-ACCOUNT/hexo-theme-next.git themes/next In your Hexo root directory, you will find a file .gitmodules. Open it, it should like this: 123[submodule &quot;themes/next&quot;] path = themes/next url = https://github.com/YOUR-GITHUB-ACCOUNT/hexo-theme-next.git More info: Git doc, merge message(you may need it), ref 3. Check everything Sever, Deploy and Push Run local server Go back to Hexo root directory and run local server 1234567$ cd ..$ cd ..$ ls_config.yml package-lock.json scaffoldsdb.json package.json sourcenode_modules public themes$ hexo server Open http://localhost:4000 in a brower. The site is there. Write a new post 1$ hexo new &quot;New Post&quot; Refresh browser. “New Post” is there. Generate and Deploy Stop the local server(Ctrl+C), and 1$ hexo clean &amp;&amp; hexo deploy -g Open https://YOUR-GITHUB-ACCOUNT.github.io/YOUR-REPOSITORY/ in a browser. “New Post” is there. Push to GitHub 1234$ git status$ git add .$ git commit -m &quot;Dev files updated&quot;$ git push origin master Refresh YOUR-DEV-REPOSITORY on GitHub and see Latest commit ... seconds ago. If everything works fine, we are good to go. More info: Git &amp; GitHub Tutorial for Beginners]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>GitHub</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[From Jekyll To Hexo]]></title>
    <url>%2FMyBlog%2Fen%2Ffrom-jekyll-to-hexo%2F</url>
    <content type="text"><![CDATA[Why Hexo? At first I used Jekyll 3.8.5 and built a blog on GitHub. There are a lot of equations in my post, so I also used Jekyll-Katex 0.3.0, a Jekyll plugin for easy server-side math rendering via KaTeX. Everything works fine on my local machine. But when I pushed it to GitHub, I got this: “Your site is having problems building: The tag Katexmm on line 11 in _posts/2019-01-22-ECDSA-and-Bitcoin-I.md is not a recognized Liquid tag.” I tried Netlify and Cloudcannon, as suggested by ashmaroli on StackOverflow, and failed again. Did I Choose the Right Static Generator? I asked myself. So I decided to try Hexo. 1. Hexo works fine with KaTeX First, set up Hexo environment, choose a theme, embed KaTeX and other plugins and test it on my local server. Migrate markdown posts from Jekyll to Hexo is easy. What you need to do is just delete some liquid tags or something like that. If everything goes well, you may see your pretty equations within one hour. 2. Hexo is faster With the same markdown posts, jekyll serve costed me about 60 seconds, While hexo server is less than 3 seconds. The speed of Hexo is around 20×20\times20×! Furthermore, each time you save changes in my text editor, i.e. Atom, you don’t need to hexo server again. Refresh you browser and you’ll see the changes updated. 3. Fancy theme and plugins Theme “Next” is amazing. There are lot’s of plugins ready to employ. It’s handy and powerful. Next, let’s see how it works.]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Jekyll</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ECDSA and Bitcoin II: Base Point, Order and secp256k1]]></title>
    <url>%2FMyBlog%2Fen%2FECDSA-and-Bitcoin-II%2F</url>
    <content type="text"><![CDATA[In previous post, we’ve got some general ideas about ECDSA, this post will focus on intuitions behind secp256k1, the set of parameters Bitcoin used. Before we dive in, we can get a glimpse of what it looks like(secp256k1.png). More info: Recommended Elliptic Curve Domain Parameters: page 15. I. Base point and order 1. Base point and it’s generated group The example in previous post is : a=1,b=1,P=23,x1=3,y1=10a=1,b=1,P=23,x_{1}=3,y_{1}=10a=1,b=1,P=23,x1​=3,y1​=10. Or state in another away y2=x3+x+1 mod 23y^2=x^3+x+1\space mod\space 23 y2=x3+x+1 mod 23 We started from G(0,1)G(0,1)G(0,1), a base point. By multiplying GGG with 1,2,...,281,2,...,281,2,...,28 respectivly, we generated a group of 28 points(the last point O\mathcal{O}O is the point at infinity):$$(0, 1), (6, 19), (3, 13), (13, 16), (18, 3), (7, 11), (11, 3), (5, 19), (19, 18),$$ (12,4),(1,16),(17,20),(9,16),(4,0),(9,7),(17,3),(1,7),(12,19),(12, 4), (1, 16), (17, 20), (9, 16), (4, 0), (9, 7), (17, 3), (1, 7), (12, 19), (12,4),(1,16),(17,20),(9,16),(4,0),(9,7),(17,3),(1,7),(12,19), (19,5),(5,4),(11,20),(7,12),(18,20),(13,7),(3,10),(6,4),(0,22)(19, 5), (5, 4), (11, 20), (7, 12), (18, 20), (13, 7), (3, 10), (6, 4), (0, 22) (19,5),(5,4),(11,20),(7,12),(18,20),(13,7),(3,10),(6,4),(0,22) O\mathcal{O} O If we starts from another point in the above group, we will see a very interesting property: the points generated by multiply this point are still in this group. Figure 3.1-3.27 show 27 base points and the group generated by them respectivly. One last base point does not show here is infinity point O\mathcal{O}O.By definition O+O=O\mathcal{O}+\mathcal{O}=\mathcal{O}O+O=O, the generated group of O\mathcal{O}O consisits of one point: itself. If we count the number of generated points of each group we will find another interesting property. There are 12 base points, each of them generates the same 28 points group(27 points + O\mathcal{O}O). There are 6 base points, each of them generates a group of 14 points. There are 6 other base points each of them genertates a group of 7 points. There are 3 base points each of them generates a group of 3 points. Point O\mathcal{O}O generates a group of 1 point. Base Point # of Generated Points Divisor of 28? (0,1)(0,22)(1,7)(1,16)(3,10)(3,13)(9,7)(9,16)(18,3)(18,20)(19,5)(19,18) 28 yes (6,4)(6,19)(7,11)(7,12)(12,4)(12,19) 14 yes (5,4)(5,19)(13,7)(13,16)(17,3)(17,20) 7 yes (4,0)(11,3)(11,20) 4 yes O\mathcal{O}O 1 yes The interesting property is: 28,14,7,4,1 are all divisors of 28. Is it a coincidence? No, it’s not. Before prove this property, let’s see where does this 28 come from. 2. The order of the curve This 28 is called the order of the curve. It is determined by the elliptic curve y2=x3+x+1y^2=x^3+x+1y2=x3+x+1 and mod 23mod\space 23mod 23. Why? Let’s figure it out step by step. First, mod 23mod\space 23mod 23 have 23 possible results: −1 mod 23=22-1 \space mod \space 23 = 22 −1 mod 23=22 0 mod 23=00 \space mod \space 23 = 0 0 mod 23=0 1 mod 23=11 \space mod \space 23 = 1 1 mod 23=1 2 mod 23=22 \space mod \space 23 = 2 2 mod 23=2 ...... ... 22 mod 23=2222 \space mod \space 23 = 22 22 mod 23=22 23 mod 23=023 \space mod \space 23 = 0 23 mod 23=0 24 mod 23=124 \space mod \space 23 = 1 24 mod 23=1 25 mod 23=225 \space mod \space 23 = 2 25 mod 23=2 ...... ... If yyy is an integer, how many possible results y2 mod 23y^2 \space mod \space 23y2 mod 23 will have? Since in the ‘mod’ world only remainders matter, so it has at most 23 results. Actually, it’s far less than 23，since (23−y)2 mod 23=(23∗23−2∗23∗y+y2) mod 23=y2 mod 23(23-y)^2 \space mod \space 23 = (\bcancel{23*23} - \bcancel{2*23*y} + y^2)\space mod \space 23= y^2 \space mod \space 23 (23−y)2 mod 23=(23∗23−2∗23∗y​+y2) mod 23=y2 mod 23 Specifically, there are 12 possible results: 232 mod 23=02 mod 23=0 mod 23=023^2 \space mod \space 23 = 0^2 \space mod \space 23 = 0 \space mod \space 23 = 0 232 mod 23=02 mod 23=0 mod 23=0 222 mod 23=12 mod 23=1 mod 23=122^2 \space mod \space 23 = 1^2 \space mod \space 23 = 1 \space mod \space 23 = 1 222 mod 23=12 mod 23=1 mod 23=1 212 mod 23=22 mod 23=4 mod 23=421^2 \space mod \space 23 = 2^2 \space mod \space 23 = 4 \space mod \space 23 = 4 212 mod 23=22 mod 23=4 mod 23=4 202 mod 23=32 mod 23=9 mod 23=920^2 \space mod \space 23 = 3^2 \space mod \space 23 = 9 \space mod \space 23 = 9 202 mod 23=32 mod 23=9 mod 23=9 192 mod 23=42 mod 23=16 mod 23=1619^2 \space mod \space 23 = 4^2 \space mod \space 23 = 16 \space mod \space 23 = 16 192 mod 23=42 mod 23=16 mod 23=16 182 mod 23=52 mod 23=25 mod 23=218^2 \space mod \space 23 = 5^2 \space mod \space 23 = 25 \space mod \space 23 = 2 182 mod 23=52 mod 23=25 mod 23=2 172 mod 23=62 mod 23=36 mod 23=1317^2 \space mod \space 23 = 6^2 \space mod \space 23 = 36 \space mod \space 23 = 13 172 mod 23=62 mod 23=36 mod 23=13 162 mod 23=72 mod 23=49 mod 23=316^2 \space mod \space 23 = 7^2 \space mod \space 23 = 49 \space mod \space 23 = 3 162 mod 23=72 mod 23=49 mod 23=3 152 mod 23=82 mod 23=64 mod 23=1815^2 \space mod \space 23 = 8^2 \space mod \space 23 = 64 \space mod \space 23 = 18 152 mod 23=82 mod 23=64 mod 23=18 142 mod 23=92 mod 23=81 mod 23=1214^2 \space mod \space 23 = 9^2 \space mod \space 23 = 81 \space mod \space 23 = 12 142 mod 23=92 mod 23=81 mod 23=12 132 mod 23=102 mod 23=100 mod 23=813^2 \space mod \space 23 = 10^2 \space mod \space 23 = 100 \space mod \space 23 = 8 132 mod 23=102 mod 23=100 mod 23=8 122 mod 23=112 mod 23=121 mod 23=612^2 \space mod \space 23 = 11^2 \space mod \space 23 = 121 \space mod \space 23 = 6 122 mod 23=112 mod 23=121 mod 23=6 How about x3+x+1 mod 23x^3+x+1 \space mod \space 23x3+x+1 mod 23? Still only remainders matter, so it has at most 23 results. Since y2=x3+x+1 mod 23y^2=x^3+x+1\space mod\space 23y2=x3+x+1 mod 23, we need to check whether these 23 results match the above 12 results. 03+0+1 mod 23=1 mod 23=1(match: y=1 or y=22)0^3+0+1 \space mod\space 23 = 1 \space mod\space 23 = 1 (match:\space y=1\space or\space y=22) 03+0+1 mod 23=1 mod 23=1(match: y=1 or y=22) 13+1+1 mod 23=3 mod 23=3(match: y=7 or y=16)1^3+1+1 \space mod\space 23 = 3 \space mod\space 23 = 3 (match:\space y=7\space or\space y=16) 13+1+1 mod 23=3 mod 23=3(match: y=7 or y=16) 23+2+1 mod 23=11 mod 23=11(no match)2^3+2+1 \space mod\space 23 = 11 \space mod\space 23 = 11 (no \space match) 23+2+1 mod 23=11 mod 23=11(no match) 33+3+1 mod 23=31 mod 23=8(match: y=10 or y=13)3^3+3+1 \space mod\space 23 = 31 \space mod\space 23 = 8 (match:\space y=10\space or\space y=13) 33+3+1 mod 23=31 mod 23=8(match: y=10 or y=13) 43+4+1 mod 23=69 mod 23=0(match: y=0)4^3+4+1 \space mod\space 23 = 69 \space mod\space 23 = 0 (match:\space y=0) 43+4+1 mod 23=69 mod 23=0(match: y=0) 53+5+1 mod 23=131 mod 23=16(match: y=4 or y=19)5^3+5+1 \space mod\space 23 = 131 \space mod\space 23 = 16 (match:\space y=4\space or\space y=19) 53+5+1 mod 23=131 mod 23=16(match: y=4 or y=19) 63+6+1 mod 23=233 mod 23=16(match: y=4 or y=19)6^3+6+1 \space mod\space 23 = 233 \space mod\space 23 = 16 (match:\space y=4\space or\space y=19) 63+6+1 mod 23=233 mod 23=16(match: y=4 or y=19) 73+7+1 mod 23=351 mod 23=6(match: y=11 or y=12)7^3+7+1 \space mod\space 23 = 351 \space mod\space 23 = 6 (match:\space y=11\space or\space y=12) 73+7+1 mod 23=351 mod 23=6(match: y=11 or y=12) 83+8+1 mod 23=521 mod 23=15(no match)8^3+8+1 \space mod\space 23 = 521 \space mod\space 23 = 15 (no \space match) 83+8+1 mod 23=521 mod 23=15(no match) 93+9+1 mod 23=739 mod 23=3(match: y=7 or y=16)9^3+9+1 \space mod\space 23 = 739 \space mod\space 23 = 3 (match:\space y=7\space or\space y=16) 93+9+1 mod 23=739 mod 23=3(match: y=7 or y=16) 103+10+1 mod 23=1011 mod 23=22(no match)10^3+10+1 \space mod\space 23 = 1011 \space mod\space 23 = 22 (no \space match) 103+10+1 mod 23=1011 mod 23=22(no match) 113+11+1 mod 23=1043 mod 23=9(match: y=3 or y=20)11^3+11+1 \space mod\space 23 = 1043 \space mod\space 23 = 9 (match:\space y=3\space or\space y=20) 113+11+1 mod 23=1043 mod 23=9(match: y=3 or y=20) 123+12+1 mod 23=1741 mod 23=16(match: y=4 or y=19)12^3+12+1 \space mod\space 23 = 1741 \space mod\space 23 = 16 (match:\space y=4\space or\space y=19) 123+12+1 mod 23=1741 mod 23=16(match: y=4 or y=19) 133+13+1 mod 23=2211 mod 23=3(match: y=7 or y=16)13^3+13+1 \space mod\space 23 = 2211 \space mod\space 23 = 3 (match:\space y=7\space or\space y=16) 133+13+1 mod 23=2211 mod 23=3(match: y=7 or y=16) 143+14+1 mod 23=2759 mod 23=22(no match)14^3+14+1 \space mod\space 23 = 2759 \space mod\space 23 = 22 (no \space match) 143+14+1 mod 23=2759 mod 23=22(no match) 153+15+1 mod 23=3391 mod 23=10(no match)15^3+15+1 \space mod\space 23 = 3391 \space mod\space 23 = 10 (no \space match) 153+15+1 mod 23=3391 mod 23=10(no match) 163+16+1 mod 23=4113 mod 23=19(no match)16^3+16+1 \space mod\space 23 = 4113 \space mod\space 23 = 19 (no \space match) 163+16+1 mod 23=4113 mod 23=19(no match) 173+17+1 mod 23=4931 mod 23=9(match: y=3 or y=20)17^3+17+1 \space mod\space 23 = 4931 \space mod\space 23 = 9 (match:\space y=3\space or\space y=20) 173+17+1 mod 23=4931 mod 23=9(match: y=3 or y=20) 183+18+1 mod 23=5851 mod 23=9(match: y=3 or y=20)18^3+18+1 \space mod\space 23 = 5851 \space mod\space 23 = 9 (match:\space y=3\space or\space y=20) 183+18+1 mod 23=5851 mod 23=9(match: y=3 or y=20) 193+19+1 mod 23=6879 mod 23=2(match: y=5 or y=18)19^3+19+1 \space mod\space 23 = 6879 \space mod\space 23 = 2 (match:\space y=5\space or\space y=18) 193+19+1 mod 23=6879 mod 23=2(match: y=5 or y=18) 203+20+1 mod 23=8021 mod 23=17(no match)20^3+20+1 \space mod\space 23 = 8021 \space mod\space 23 = 17 (no \space match) 203+20+1 mod 23=8021 mod 23=17(no match) 213+21+1 mod 23=9283 mod 23=14(no match)21^3+21+1 \space mod\space 23 = 9283 \space mod\space 23 = 14 (no \space match) 213+21+1 mod 23=9283 mod 23=14(no match) 223+22+1 mod 23=10671 mod 23=22(no match)22^3+22+1 \space mod\space 23 = 10671 \space mod\space 23 = 22 (no \space match) 223+22+1 mod 23=10671 mod 23=22(no match) There are 27 matched points: (0,1),(0,22),(1,7),(1,16),(3,10),(3,13),(4,0),(5,4),(5,19),(0, 1), (0, 22), (1, 7), (1, 16), (3, 10), (3, 13), (4, 0), (5, 4), (5, 19), (0,1),(0,22),(1,7),(1,16),(3,10),(3,13),(4,0),(5,4),(5,19), (6,4),(6,19),(7,11),(7,12),(9,7),(9,16),(11,3),(11,20),(12,4),(12,19),(6, 4), (6, 19), (7, 11), (7, 12), (9, 7), (9, 16), (11, 3), (11, 20), (12, 4), (12, 19), (6,4),(6,19),(7,11),(7,12),(9,7),(9,16),(11,3),(11,20),(12,4),(12,19), (13,7),(13,16),(17,3),(17,20),(18,3),(18,20),(19,5),(19,18)(13, 7), (13, 16), (17, 3), (17, 20), (18, 3), (18, 20), (19, 5), (19, 18) (13,7),(13,16),(17,3),(17,20),(18,3),(18,20),(19,5),(19,18) plus point O\mathcal{O}O, altogether 28 points. Use the same method, we can get the order of y2=x3+x+1 mod 37y^2=x^3+x+1\space mod\space 37y2=x3+x+1 mod 37 is 48 and the order of y2=x3+x+1 mod 487y^2=x^3+x+1\space mod\space 487y2=x3+x+1 mod 487 is 520, etc. Actually, there is a better method called Schoof Algorithm, with which we can get the order of the curve without go through every candidate points. In practice, such as Bitcoin, the order of the curve is very high. It’s impossible to go through every point. With Schoof Algorithm we can still get the order. You can find the Python code of Schoof Algorithm here. Try some small parameters youself. Reference: Elliptic Curve Cryptography 3. The order of a base point The nubmer of points in the generated group of a base point is called the order of a base point. In the case of y2=x3+x+1 mod 23y^2=x^3+x+1\space mod\space 23y2=x3+x+1 mod 23, the order of each base point is a divisor of 28. For example, the order of (0,1) is 28 and the order of (6,4) is 14. Based on Lagrange’s theorem, we can prove that the order of a base point is a divisor of the order of the curve. Sometimes the order of the curve is a prime. And a prime has only two divisors: 1, and the prime itself. Therefore, except the order of point O\mathcal{O}O is 1, the order of all other base points is equal to the order of the curve. II. Parameters in secp256k1 1. The elliptic curve In secp256k1, a=0,b=7a=0,b=7a=0,b=7. So the elliptic curve is y2=x3+7 mod Py^2=x^3+7\space mod\space P y2=x3+7 mod P where P=2256−232−29−28−27−26−24−1P = 2^{256} - 2^{32} - 2^9 - 2^8 - 2^7 - 2^6 - 2^4 -1 P=2256−232−29−28−27−26−24−1 2. The order of the curve In secp256k1, the order of the curve, denoted by nnn, is FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141\text{FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141} FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 in decimal, it’s 115792089237316195423570985008687907852837564279074904382605163141518161494337115792089237316195423570985008687907852837564279074904382605163141518161494337 115792089237316195423570985008687907852837564279074904382605163141518161494337 3. Base point In secp256k1, base point is G(Gx,Gy)G(G_{x},G_{y})G(Gx​,Gy​), where Gx=79BE667EF9DCBBAC55A06295CE870B07029BFCDB2DCE28D959F2815B16F81798G_{x}=79BE667EF9DCBBAC55A06295CE870B07029BFCDB2DCE28D959F2815B16F81798 Gx​=79BE667EF9DCBBAC55A06295CE870B07029BFCDB2DCE28D959F2815B16F81798 Gy=483ADA7726A3C4655DA4FBFC0E1108A8FD17B448A68554199C47D08FFB10D4B8G_{y}=483ADA7726A3C4655DA4FBFC0E1108A8FD17B448A68554199C47D08FFB10D4B8 Gy​=483ADA7726A3C4655DA4FBFC0E1108A8FD17B448A68554199C47D08FFB10D4B8 4. The order of the base point We can verify the order of the curve nnn is a prime, with the help of this Python code. Therefore, except the order of point O\mathcal{O}O is 1, the order of all other base points, including G, is nnn. 5. Cofactor By definition, cofactor h=the order of the curvethe order of the base pointh=\frac{the\space order\space of\space the\space curve}{the\space order\space of\space the\space base\space point} h=the order of the base pointthe order of the curve​ Obviousely, in secp256k1, h=n/n=1h=n/n=1h=n/n=1.]]></content>
      <categories>
        <category>ECDSA and Bitcoin</category>
      </categories>
      <tags>
        <tag>secp256k1</tag>
        <tag>Bitcoin parameters</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ECDSA and Bitcoin I: Intuition About Elliptic Curve]]></title>
    <url>%2FMyBlog%2Fen%2FECDSA-and-Bitcoin-I%2F</url>
    <content type="text"><![CDATA[The set of parameters Bitcoin used is called secp256k1. It’s one of the Standards for Efficient Cryptogrpahy(SEC) or Standards for Efficient Cryptography Group (SECG). SEC or SECG is base on Elliptic Curve Digital Signature Algorithm(ECDSA). Before dive in, we can get a glimpse of what the algorithm looks like in Brown et al’s publication(ec1.png, ec2.png). More info: Elliptic Curve Cryptography: page 6-7 I. Intuition About Elliptic Curve: Basics 1. Double a point(Add a point to itself): Let’s consider a elliptic curve (EC)(EC)(EC): y2=x3+ax+by^2 = x^3 + ax + b y2=x3+ax+b , mod(P) will be discussed latter. There is a initial point G(x1,y1)G(x_{1},y_{1})G(x1​,y1​) on ECECEC, how to get D=G+GD = G + GD=G+G? Draw a tangent line at GGG, and cross ECECEC at C(xc,yc)C(x_{c},y_{c})C(xc​,yc​). The vertical line crosses CCC, will cross ECECEC at D(x3,y3)D(x_{3},y_{3})D(x3​,y3​), which is the result G+GG+GG+G by definition. 1.1 The slope of the tangent line: ∵y2=x3+ax+b\because y^2 = x^3 + ax + b ∵y2=x3+ax+b ∴2ydy=(3x2+a)dx\therefore 2ydy = (3x^2 +a)dx ∴2ydy=(3x2+a)dx ∴dydx=(3x2+a)2y\therefore {\frac{dy}{dx}} = {\frac{(3x^2 +a)}{2y}} ∴dxdy​=2y(3x2+a)​ ∴λ=dydx=3x12+a2y1\therefore \lambda = {\frac{dy}{dx}} = {\frac{3x_{1}^2+a}{2y_{1}}} ∴λ=dxdy​=2y1​3x12​+a​ 1.2 Point C(xc,yc)C(x_{c},y_{c})C(xc​,yc​) : ∵yc−y1xc−x1=λ\because {\frac{y_{c}-y_{1}}{x_{c}-x_{1}}} = \lambda ∵xc​−x1​yc​−y1​​=λ ∴yc−y1=λ(xc−x1)\therefore y_{c}-y_{1} = \lambda(x_{c}-x_{1}) ∴yc​−y1​=λ(xc​−x1​) ∴yc=λ(xc−x1)+y1\therefore y_{c} = \lambda(x_{c}-x_{1}) + y_{1} ∴yc​=λ(xc​−x1​)+y1​ ∵y2=x3+ax+b\because y^2 = x^3 + ax + b ∵y2=x3+ax+b ∴yc2=(λ(xc−x1)+y1)2=xc3+axc+b\therefore y_{c}^2 = (\lambda(x_{c}-x_{1}) + y_{1})^2 = x_{c}^3 + ax_{c} + b ∴yc2​=(λ(xc​−x1​)+y1​)2=xc3​+axc​+b ∴xc3−(λ(xc−x1)+y1)2+axc+b=0\therefore x_{c}^3 - (\lambda(x_{c}-x_{1}) + y_{1})^2 + ax_{c} + b = 0 ∴xc3​−(λ(xc​−x1​)+y1​)2+axc​+b=0 Let me put it another way: x3−(λ(x−x1)+y1)2+ax+b=0x^3 - (\lambda(x-x_{1}) + y_{1})^2 + ax + b = 0 x3−(λ(x−x1​)+y1​)2+ax+b=0 This equation has three roots, one of them is xcx_{c}xc​. What’s the other two roots? Yes, they are: x1,x1x_{1},x_{1}x1​,x1​(since tangent at G(x1,y1)G(x_{1},y_{1})G(x1​,y1​)). Let’s focus on the coefficient of x2x^2x2: ∵x3−(λ(x−x1)+y1)2+ax+b=0\because x^3 - (\lambda(x-x_{1}) + y_{1})^2 + ax + b = 0 ∵x3−(λ(x−x1​)+y1​)2+ax+b=0 ...−λ2x2+...=0... - \lambda^2x^2 + ... = 0 ...−λ2x2+...=0 the coefficient of x2x^2x2 is λ2\lambda^2λ2. On the other hand, since three roots are:x1,x1,xcx_{1},x_{1},x_{c}x1​,x1​,xc​, (x−x1)(x−x1)(x−xc)=0(x-x_{1})(x-x_{1})(x-x_{c})=0 (x−x1​)(x−x1​)(x−xc​)=0 ...−(x1+x1+xc)x2+...=0... - (x_{1}+x_{1}+x_{c})x^2 + ... = 0 ...−(x1​+x1​+xc​)x2+...=0 This two coefficient is identical, therefore λ2=x1+x1+xc\lambda^2=x_{1}+x_{1}+x_{c} λ2=x1​+x1​+xc​ xc=λ2−x1−x1=λ2−2x1x_{c}=\lambda^2-x_{1}-x_{1}=\lambda^2-2x_{1} xc​=λ2−x1​−x1​=λ2−2x1​ 1.3 Point D(x3,y3)D(x_{3},y_{3})D(x3​,y3​) : x3=xc=λ2−x1−x1x_{3}=x_{c}=\lambda^2-x_{1}-x_{1} x3​=xc​=λ2−x1​−x1​ y3=−yc=−(λ(xc−x1)+y1)=λ(x1−x3)−y1y_{3}=-y_{c}= -(\lambda(x_{c}-x_{1}) + y_{1})=\lambda(x_{1}-x_{3}) - y_{1} y3​=−yc​=−(λ(xc​−x1​)+y1​)=λ(x1​−x3​)−y1​ where λ=3x12+a2y1\lambda = {\frac{3x_{1}^2+a}{2y_{1}}} λ=2y1​3x12​+a​ G(x1,y1)+G(x1,y1)G(x_{1},y_{1}) + G(x_{1},y_{1})G(x1​,y1​)+G(x1​,y1​):λ=3x12+a2y1\lambda = {\frac{3x_{1}^2+a}{2y_{1}}}λ=2y1​3x12​+a​x3=λ2−x1−x1x_{3}=\lambda^2-x_{1}-x_{1}x3​=λ2−x1​−x1​y3=λ(x1−x3)−y1y_{3}=\lambda(x_{1}-x_{3}) - y_{1}y3​=λ(x1​−x3​)−y1​D(x3,y3)=G+GD(x_{3},y_{3})=G+GD(x3​,y3​)=G+G 2. Addition(Add two points together): There are two initial points A(x1,y1)A(x_{1},y_{1})A(x1​,y1​) and B(x2,y2)B(x_{2},y_{2})B(x2​,y2​) on ECECEC, how to get D=A+BD = A + BD=A+B? Draw a line through AAA and BBB, and cross ECECEC at C(xc,yc)C(x_{c},y_{c})C(xc​,yc​). The vertical line crosses CCC, will cross ECECEC at D(x3,y3)D(x_{3},y_{3})D(x3​,y3​), which is the result A+BA+BA+B by definition. If AAA and BBB are on the same vertical line, i.e. x1=x2,y1=−y2x_{1}=x_{2},y_{1}=-y_{2}x1​=x2​,y1​=−y2​, then A+B=OA+B=\mathcal{O}A+B=O, where O\mathcal{O}O is an infinity point with the following properties(by definition): G+O=O,O+O=OG+\mathcal{O}=\mathcal{O},\mathcal{O}+\mathcal{O}=\mathcal{O} G+O=O,O+O=O Intuitively, O\mathcal{O}O is a point faaaar away. 2.1 The slope of the line is determined by two initial points : λ=dydx=y2−y1x2−x1\lambda = {\frac{dy}{dx}} = {\frac{y_{2}-y_{1}}{x_{2}-x_{1}}} λ=dxdy​=x2​−x1​y2​−y1​​ 2.2 Point C(xc,yc)C(x_{c},y_{c})C(xc​,yc​): ∵yc−y1xc−x1=λ\because {\frac{y_{c}-y_{1}}{x_{c}-x_{1}}} = \lambda ∵xc​−x1​yc​−y1​​=λ ∴yc−y1=λ(xc−x1)\therefore y_{c}-y_{1} = \lambda(x_{c}-x_{1}) ∴yc​−y1​=λ(xc​−x1​) ∴yc=λ(xc−x1)+y1\therefore y_{c} = \lambda(x_{c}-x_{1}) + y_{1} ∴yc​=λ(xc​−x1​)+y1​ ∵y2=x3+ax+b\because y^2 = x^3 + ax + b ∵y2=x3+ax+b ∴yc2=(λ(xc−x1)+y1)2=xc3+axc+b\therefore y_{c}^2 = (\lambda(x_{c}-x_{1}) + y_{1})^2 = x_{c}^3 + ax_{c} + b ∴yc2​=(λ(xc​−x1​)+y1​)2=xc3​+axc​+b ∴xc3−(λ(xc−x1)+y1)2+axc+b=0\therefore x_{c}^3 - (\lambda(x_{c}-x_{1}) + y_{1})^2 + ax_{c} + b = 0 ∴xc3​−(λ(xc​−x1​)+y1​)2+axc​+b=0 Let me put it another way: x3−(λ(x−x1)+y1)2+ax+b=0x^3 - (\lambda(x-x_{1}) + y_{1})^2 + ax + b = 0 x3−(λ(x−x1​)+y1​)2+ax+b=0 This equation has three roots, one of them is xcx_{c}xc​. What’s the other two roots? Yes, they are: x1,x2x_{1},x_{2}x1​,x2​. Let’s focus on the coefficient of x2x^2x2: ∵x3−(λ(x−x1)+y1)2+ax+b=0\because x^3 - (\lambda(x-x_{1}) + y_{1})^2 + ax + b = 0 ∵x3−(λ(x−x1​)+y1​)2+ax+b=0 ...−λ2x2+...=0... - \lambda^2x^2 + ... = 0 ...−λ2x2+...=0 the coefficient of x2x^2x2 is λ2\lambda^2λ2. On the other hand, since three roots are:x1,x2,xcx_{1},x_{2},x_{c}x1​,x2​,xc​, (x−x1)(x−x2)(x−xc)=0(x-x_{1})(x-x_{2})(x-x_{c})=0 (x−x1​)(x−x2​)(x−xc​)=0 ...−(x1+x2+xc)x2+...=0... - (x_{1}+x_{2}+x_{c})x^2 + ... = 0 ...−(x1​+x2​+xc​)x2+...=0 This two coefficient is identical, therefore λ2=x1+x2+xc\lambda^2=x_{1}+x_{2}+x_{c} λ2=x1​+x2​+xc​ xc=λ2−x1−x2x_{c}=\lambda^2-x_{1}-x_{2} xc​=λ2−x1​−x2​ Reference: Explicit Addition Formulae 2.3 Point D(x3,y3)D(x_{3},y_{3})D(x3​,y3​) : x3=xc=λ2−x1−x2x_{3}=x_{c}=\lambda^2-x_{1}-x_{2} x3​=xc​=λ2−x1​−x2​ y3=−yc=−(λ(xc−x1)+y1)=λ(x1−x3)−y1y_{3}=-y_{c}= -(\lambda(x_{c}-x_{1}) + y_{1})= \lambda(x_{1}-x_{3}) - y_{1} y3​=−yc​=−(λ(xc​−x1​)+y1​)=λ(x1​−x3​)−y1​ where λ=y2−y1x2−x1\lambda = {\frac{y_{2}-y_{1}}{x_{2}-x_{1}}} λ=x2​−x1​y2​−y1​​ A(x1,y1)+B(x2,y2)A(x_{1},y_{1}) + B(x_{2},y_{2})A(x1​,y1​)+B(x2​,y2​):λ=y2−y1x2−x1\lambda = {\frac{y_{2}-y_{1}}{x_{2}-x_{1}}}λ=x2​−x1​y2​−y1​​x3=λ2−x1−x2x_{3}=\lambda^2-x_{1}-x_{2}x3​=λ2−x1​−x2​y3=λ(x1−x3)−y1y_{3}=\lambda(x_{1}-x_{3}) - y_{1}y3​=λ(x1​−x3​)−y1​D(x3,y3)=A+BD(x_{3},y_{3})=A+BD(x3​,y3​)=A+B II. Intuition About Elliptic Curve: mod With mod, elliptic curve is no longer a curve, instead it is turned into a group of discrete points. With mod(P), the result D will be capped by P, therefore we can control the magnitude of the output. In Figure 1.2, we start from an initial point G(3,10), i.e. the point labeled 1, use EC multiplication and get the rest points in the group. EC multiplication, which is based on EC double and EC addition, will be discussed latter. Let's go over some details of `mod` first. 1. mod: Basics Let’s see some examples: x mod P:x \space mod \space P: x mod P: −1 mod 23=22-1 \space mod \space 23 = 22 −1 mod 23=22 0 mod 23=00 \space mod \space 23 = 0 0 mod 23=0 1 mod 23=11 \space mod \space 23 = 1 1 mod 23=1 2 mod 23=22 \space mod \space 23 = 2 2 mod 23=2 ...... ... 22 mod 23=2222 \space mod \space 23 = 22 22 mod 23=22 23 mod 23=023 \space mod \space 23 = 0 23 mod 23=0 24 mod 23=124 \space mod \space 23 = 1 24 mod 23=1 25 mod 23=225 \space mod \space 23 = 2 25 mod 23=2 ...... ... 2. mod: Properties x+y mod P=(x mod P+y mod P) mod Px+y \space mod \space P = (x \space mod \space P + y\space mod \space P)\space mod \space P x+y mod P=(x mod P+y mod P) mod P xy mod P=((x mod P)(y mod P)) mod Pxy \space mod \space P = ((x \space mod \space P) (y\space mod \space P))\space mod \space P xy mod P=((x mod P)(y mod P)) mod P Why? Let’s see an example: x=25,y=30,P=23x=25,y=30,P=23 x=25,y=30,P=23 25+30 mod 23=(23+2)+(23+7) mod 23=(23∗2+2+7) mod 2325+30\space mod \space 23 = (23+2) +(23+7)\space mod \space 23=(\bcancel{23*2}+2+7)\space mod \space 23 25+30 mod 23=(23+2)+(23+7) mod 23=(23∗2+2+7) mod 23 =2+7 mod 23=(25 mod 23+30 mod 23) mod 23=2+7\space mod \space 23=(25\space mod \space 23+30\space mod \space 23)\space mod \space 23 =2+7 mod 23=(25 mod 23+30 mod 23) mod 23 Similarly, 25∗30 mod 23=(23+2)∗(23+7) mod 23=(23∗23+23∗2+23∗7+2∗7) mod 2325*30\space mod \space 23 = (23+2) * (23+7)\space mod \space 23=(\bcancel{23*23}+\bcancel{23*2}+\bcancel{23*7}+2*7)\space mod \space 23 25∗30 mod 23=(23+2)∗(23+7) mod 23=(23∗23+23∗2+23∗7+2∗7) mod 23 =2∗7 mod 23=(25 mod 23∗30 mod 23) mod 23=2*7\space mod \space 23=(25\space mod \space 23*30\space mod \space 23)\space mod \space 23 =2∗7 mod 23=(25 mod 23∗30 mod 23) mod 23 When mod, only remainders matter. 3. mod: Inverse Sometimes, we need to caculate 1A mod P{\frac{1}{A}}\space mod\space PA1​ mod P, i.e. modular inverse. As we know, if A∗B=1A*B = 1A∗B=1, BBB is the inverse of AAA. The definition of modular inverses is similar. If both A and BA\space and\space BA and B are integers and A∗B mod P=1A*B\space mod \space P=1A∗B mod P=1, BBB is the modular inverse of AAA. Or state in an other way: 1A mod P=B{\frac{1}{A}}\space mod\space P=BA1​ mod P=B. 3.1 One Improtant Property Note: If AAA does not coprime to PPP, i.e. if AAA shares at least one prime factor with PPP, AAA has no modular inverse (mod PPP). This is why secp256k1 chooses a prime PPP, which we will discuss later. An example: A=6,P=8(they share one prime factor 2)A=6, P=8(they\space share\space one\space prime\space factor\space 2) A=6,P=8(they share one prime factor 2) 6∗0 mod 8=0=0∗26*0 \space mod \space 8=0=0*2 6∗0 mod 8=0=0∗2 6∗1 mod 8=2=1∗26*1 \space mod \space 8=2=1*2 6∗1 mod 8=2=1∗2 6∗2 mod 8=4=2∗26*2 \space mod \space 8=4=2*2 6∗2 mod 8=4=2∗2 6∗3 mod 8=2=1∗26*3 \space mod \space 8=2=1*2 6∗3 mod 8=2=1∗2 6∗4 mod 8=0=0∗26*4 \space mod \space 8=0=0*2 6∗4 mod 8=0=0∗2 ...... ... A more general case: A=n∗k,P=m∗k(they share one prime factor k)A=n*k, P=m*k(they\space share\space one\space prime\space factor\space k) A=n∗k,P=m∗k(they share one prime factor k) ∵A∗B=nB∗k\because A*B=nB*k ∵A∗B=nB∗k ∴A∗B mod P=nB∗k mod (m∗k)\therefore A*B\space mod \space P=nB*k \space mod \space (m*k) ∴A∗B mod P=nB∗k mod (m∗k) The reault must be something like t∗kt*kt∗k, where ttt is an integer. 3.2 Calculate Modular Inverses If AAA coprimes to PPP, how to find it’s modular inverse BBB? We can use Extend Euclidean Algorithm. An example (A=7,P=23A=7,P=23A=7,P=23): n R ×\times× 23 ×\times× 7 t 23=1*23+0 23 1\color{green} 11 0\color{green} 00 0 7=0+1*7 7 0\color{orange} 00 1\color{orange} 11 1 23=3*7+2 or 2=23- 3\color{magenta} 33*7 3\color{magenta} 33 2 1\color{green} 11- 3\color{magenta} 33* 0\color{orange} 00= 1\color{blue} 11 0\color{green} 00- 3\color{magenta} 33* 1\color{orange} 11= −3\color{blue} -3−3 2 7=3*2+1 or 1=7- 3\color{red} 33*2 3\color{red} 33 1 0\color{orange} 00- 3\color{red} 33* 1\color{blue} 11=-3 1\color{orange} 11- 3\color{red} 33*( −3\color{blue} -3−3)=10 3 From the last line of the above table, we have 1=(−3)∗23+10∗71=(-3) * 23 + 10 * 7 1=(−3)∗23+10∗7 ∴10∗7=3∗23+1\therefore 10 * 7 = 3 * 23 +1 ∴10∗7=3∗23+1 ∴10∗7 mod 23=1\therefore 10 * 7\space mod\space 23 = 1 ∴10∗7 mod 23=1 ∴B=10\therefore B=10 ∴B=10 General cases(it’s a loop until R=1 therefore B=atB=a_{t}B=at​): n R ×\times×P ×\times×A t R0R_{0}R0​=1*PPP+0 R0=PR_{0}=PR0​=P p0=1\color{green}p_{0}=1p0​=1 a0=0\color{green}a_{0}=0a0​=0 0 R1R_{1}R1​=0+1*AAA R1=AR_{1}=AR1​=A p1=0\color{orange}p_{1}=0p1​=0 a1=1\color{orange}a_{1}=1a1​=1 1 R2=R0R_{2}=R_{0}R2​=R0​- n2\color{magenta}n_{2}n2​*R1R_{1}R1​ n2\color{magenta}n_{2}n2​ R2R_{2}R2​ p0\color{green} p_{0}p0​- n2\color{magenta}n_{2}n2​* p1\color{orange}p_{1}p1​= p2\color{blue}p_{2}p2​ a0\color{green}a_{0}a0​- n2\color{magenta}n_{2}n2​* a1\color{orange}a_{1}a1​= a2\color{blue}a_{2}a2​ 2 … … … … … … 1=Rt−2R_{t-2}Rt−2​- nt\color{red}n_{t}nt​*Rt−1R_{t-1}Rt−1​ nt\color{red}n_{t}nt​ 1 pt−2\color{orange}p_{t-2}pt−2​- nt\color{red}n_{t}nt​* pt−1\color{blue}p_{t-1}pt−1​=ptp_{t}pt​ at−2\color{orange}a_{t-2}at−2​- nt\color{red}n_{t}nt​*( at−1\color{blue}a_{t-1}at−1​)=ata_{t}at​ t JavaScript: Python: Reference: Modular inverses, Extend Euclidean Algorithm, Elliptic Curve Cryptography, HTML, JavaScript, Python 4. mod: Elliptic Curve Recall: We need to caculate λ\lambdaλ, x3x_{3}x3​ and y3y_{3}y3​. This time let’s put modPmod PmodP at the end of x3x_{3}x3​ and y3y_{3}y3​ 4.1 Double a point(Add a point to itself) From initial point G(x1,y1)G(x_{1},y_{1})G(x1​,y1​): λ=3x12+a2y1\lambda = {\frac{3x_{1}^2+a}{2y_{1}}} λ=2y1​3x12​+a​ x3=λ2−x1−x1 mod Px_{3}=\lambda^2-x_{1}-x_{1}\color{blue}\space mod\space P x3​=λ2−x1​−x1​ mod P y3=λ(x1−x3)−y1 mod Py_{3}=\lambda(x_{1}-x_{3}) - y_{1}\color{blue}\space mod\space P y3​=λ(x1​−x3​)−y1​ mod P D(x3,y3)=G+GD(x_{3},y_{3})=G+G D(x3​,y3​)=G+G Based on the properties of mod and modular inverse, x3=(λ2 mod P−x1 mod P−x1 mod P) mod Px_{3}=(\lambda^2{\color{blue}\space mod\space P}-x_{1}{\color{blue}\space mod\space P}-x_{1}{\color{blue}\space mod\space P})\color{blue}\space mod\space P x3​=(λ2 mod P−x1​ mod P−x1​ mod P) mod P x3=(λ mod P∗λ mod P−x1 mod P−x1 mod P) mod Px_{3}=(\lambda{\color{blue}\space mod\space P} * \lambda{\color{blue}\space mod\space P}-x_{1}{\color{blue}\space mod\space P}-x_{1}{\color{blue}\space mod\space P})\color{blue}\space mod\space P x3​=(λ mod P∗λ mod P−x1​ mod P−x1​ mod P) mod P Or, x3=(λ mod P∗λ mod P−x1−x1) mod Px_{3}=(\lambda{\color{blue}\space mod\space P} * \lambda{\color{blue}\space mod\space P}-x_{1}-x_{1})\color{blue}\space mod\space P x3​=(λ mod P∗λ mod P−x1​−x1​) mod P Where, λ mod P=3x12+a2y1 mod P=((3x12+a) mod P∗12y1 mod P) mod P\lambda{\color{blue}\space mod\space P} = {\frac{3x_{1}^2+a}{2y_{1}}}{\color{blue}\space mod\space P} = ((3x_{1}^2+a){\color{blue}\space mod\space P} * {\frac{1}{2y_{1}}}{\color{blue}\space mod\space P})\color{blue}\space mod\space P λ mod P=2y1​3x12​+a​ mod P=((3x12​+a) mod P∗2y1​1​ mod P) mod P =((3x12+a) mod P∗2y1 inverse mod P) mod P= ((3x_{1}^2+a){\color{blue}\space mod\space P} * 2y_{1}{\color{blue}\space inverse\space mod\space P})\color{blue}\space mod\space P =((3x12​+a) mod P∗2y1​ inverse mod P) mod P And, y3=(λ mod P∗(x1−x3)−y1) mod Py_{3}=(\lambda{\color{blue}\space mod\space P} * (x_{1}-x_{3}) - y_{1})\color{blue}\space mod\space P y3​=(λ mod P∗(x1​−x3​)−y1​) mod P Python: 4.2 Addition From initial points A(x1,y1)A(x_{1},y_{1})A(x1​,y1​) and B(x2,y2)B(x_{2},y_{2})B(x2​,y2​): λ mod P=y2−y1x2−x1 mod P=((y2−y1) mod P∗1x2−x1 mod P) mod P\lambda{\color{blue}\space mod\space P} = {\frac{y_{2}-y_{1}}{x_{2}-x_{1}}}{\color{blue}\space mod\space P} = ((y_{2}-y_{1}){\color{blue}\space mod\space P} * {\frac{1}{x_{2}-x_{1}}}{\color{blue}\space mod\space P}){\color{blue}\space mod\space P} λ mod P=x2​−x1​y2​−y1​​ mod P=((y2​−y1​) mod P∗x2​−x1​1​ mod P) mod P =((y2−y1) mod P∗(x2−x1) inverse mod P) mod P= ((y_{2}-y_{1}){\color{blue}\space mod\space P} * (x_{2}-x_{1}) {\color{blue}\space inverse\space mod\space P}){\color{blue}\space mod\space P} =((y2​−y1​) mod P∗(x2​−x1​) inverse mod P) mod P And x3=(λ mod P∗λ mod P−x1−x2) mod Px_{3}=(\lambda{\color{blue}\space mod\space P} * \lambda{\color{blue}\space mod\space P}-x_{1}-x_{2})\color{blue} \space mod\space P x3​=(λ mod P∗λ mod P−x1​−x2​) mod P y3=(λ mod P∗(x1−x3)−y1) mod Py_{3}=(\lambda{\color{blue}\space mod\space P} * (x_{1}-x_{3}) - y_{1}) \color{blue} \space mod\space P y3​=(λ mod P∗(x1​−x3​)−y1​) mod P D(x3,y3)=A+BD(x_{3},y_{3})=A+B D(x3​,y3​)=A+B Python code: 4.3 Multiplication Multiplication, or scalar multiplication, is defined as add a point to itself many times. From a initial point G(x1,y1)G(x_{1},y_{1})G(x1​,y1​): 2∗G=G+G2*G = G+G 2∗G=G+G 3∗G=G+G+G3*G = G+G+G 3∗G=G+G+G ...... ... N∗G=G+G+...+G⎵NN*G = \underbrace{G+G+...+G}_{\text{N}} N∗G=NG+G+...+G​​ In practice, N is usually very large, say FFFFFFFFFFFFFFFFFFFFFFFFFFFFFB673C211660358AAD66B17B368CD0364141\text{FFFFFFFFFFFFFFFFFFFFFFFFFFFFFB673C211660358AAD66B17B368CD0364141} FFFFFFFFFFFFFFFFFFFFFFFFFFFFFB673C211660358AAD66B17B368CD0364141 In decimal, it’s 115792089237316195423570985008687907452837564279074904382605163141518161494337115792089237316195423570985008687907452837564279074904382605163141518161494337 115792089237316195423570985008687907452837564279074904382605163141518161494337 If we use the above method to calculate N*G, it will take a looooong time to get the result. How long specifically? Let’s estimate it. At the end of 2018, multi-core GHz processors are capable of processing over 100 billion instructions per second. There are about 4.2 billion active internet users around the world. Our unverse is around 13.8 billion years old. Even if all active internet users work together since the birth of the universe, until now we’ve only finished 12.6606833790440597×1047\frac{1}{2.6606833790440597\times 10^{47}} 2.6606833790440597×10471​ Fortunatly, we have another alternative method: 2G=G+G2G = G+G 2G=G+G 4G=2G+2G4G = 2G+2G 4G=2G+2G 23G=22G+22G2^{3}G = 2^{2}G+2^{2}G 23G=22G+22G ...... ... 2m0+m1+...+mn∗G=2m0G+2m1G+...+2mnG2^{m_{0}+m_{1}+...+m_{n}} * G = 2^{m_{0}}G+2^{m_{1}}G+...+2^{m_{n}}G 2m0​+m1​+...+mn​∗G=2m0​G+2m1​G+...+2mn​G ...... ... In binary, NNN is 1111111111...0101000001⎵256\underbrace{1111111111...0101000001}_{\text{256}} 2561111111111...0101000001​​ So, N=2256+2255+...+29+27+1N=2^{256}+2^{255}+...+2^{9}+2^{7}+1 N=2256+2255+...+29+27+1 Actually, if we are going to use this method, we still need to prove +++ is associative, since +++ is not ordinary plus it’s one dot on eclliptic curve plus another dot. It’s a little bit tricky here, let me show you an example: How to prove the associativity? Silverman and Tate offered us a geometric proof in their textbook Rational Points on Elliptic Curves. The proof is very elegant, so I quoted it here. Python code(binary method): An example: a=1,b=1,P=23,x1=3,y1=10a=1,b=1,P=23,x_{1}=3,y_{1}=10a=1,b=1,P=23,x1​=3,y1​=10. The initial point G(0,1)G(0,1)G(0,1) is a generating point. 1∗G,2∗G,...,27∗G1*G,2*G,...,27*G1∗G,2∗G,...,27∗G are labeled in Figure 2.1. Notice, point 27 is right above point 1. Recall EC addition, what will happen if AAA and BBB are on the same vertical line? A+B=OA+B=\mathcal{O}A+B=O. That is to say, infinit point O\mathcal{O}O is 28th point in this group genrated by GGG. Actually, this group only have 28 points and they can all be generated by multiply GGG with 1,2,...,281,2,...,281,2,...,28. More details will be discussed in the next section. Reference: Elliptic Curve Cryptography, Python 2.7 Code]]></content>
      <categories>
        <category>ECDSA and Bitcoin</category>
      </categories>
      <tags>
        <tag>Elliptic Curve</tag>
        <tag>Math</tag>
        <tag>Python Code</tag>
      </tags>
  </entry>
</search>
